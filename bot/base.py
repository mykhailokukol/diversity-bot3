from pymongo import MongoClient
from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext

from bot.services import (
    get_exchange_rate,
    get_participants_number,
    add_user_to_db,
    already_participant,
)
from bot.config import settings

WINNER_RESORT, WINNER, RESORT = range(3)


async def start(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    keyboard = [
        [
            InlineKeyboardButton("–ë–æ–±—Ä–æ–≤—ã–π –ª–æ–≥"),
            InlineKeyboardButton("–°–æ–ª–Ω–µ—á–Ω–∞—è –î–æ–ª–∏–Ω–∞"),
        ]
    ]
    markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–æ—Ä—Ç:",
        reply_markup=markup,
    )

    return RESORT


async def choose_resort(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> ConversationHandler.END:
    client = MongoClient(settings.MONGODB_CLIENT_URL)
    resort = update.message.text

    if already_participant(client, update, resort):
        await update.message.reply_text("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")
        return

    X = get_participants_number(client)
    S = await get_exchange_rate()
    N = (X + 100) * S
    add_user_to_db(client, update, N, resort)

    markup = ReplyKeyboardRemove()
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ!\n–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–∞!\n–í–∞—à –Ω–æ–º–µ—Ä –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {N}",
        reply_markup=markup,
    )
    return ConversationHandler.END


async def choose_winner_resort(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    if int(update.message.from_user.id) != int(settings.MODERATOR_ID):
        return

    keyboard = [
        [
            InlineKeyboardButton("–ë–æ–±—Ä–æ–≤—ã–π –ª–æ–≥"),
            InlineKeyboardButton("–°–æ–ª–Ω–µ—á–Ω–∞—è –î–æ–ª–∏–Ω–∞"),
        ]
    ]
    markup = ReplyKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–æ—Ä—Ç:",
        reply_markup=markup,
    )

    return WINNER_RESORT


async def choose_winner(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    resort = update.message.text

    client = MongoClient(settings.MONGODB_CLIENT_URL)
    db = client["ski-bot"]
    participants = db["participants"]
    participants_keyboard = [[]]

    for participant in participants.find({"resort": resort}):
        participants_keyboard[0].append(InlineKeyboardButton(participant["win_number"]))
    markup = ReplyKeyboardMarkup(participants_keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–∏–≥—Ä–∞—à–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=markup,
    )

    return WINNER


async def send_congratulations(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> ConversationHandler.END:
    win_number = int(update.message.text)
    client = MongoClient(settings.MONGODB_CLIENT_URL)
    db = client["ski-bot"]
    participants = db["participants"]
    winner = participants.find_one({"win_number": win_number})

    keyboard = [
        [
            InlineKeyboardButton(
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{winner['win_number']}"
            ),
            InlineKeyboardButton(
                "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{winner['win_number']}"
            ),
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=winner["user_id"],
        text="–ü–æ–∑–¥–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑!\n"
        f'–ö—É—Ä–æ—Ä—Ç: {winner["resort"]}\n'
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —ç—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".\n'
        '–ò–ª–∏ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å –Ω–∞–∂–∞–≤ –Ω–∞ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"',
        reply_markup=markup,
    )
    return ConversationHandler.END


async def cancel(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> int:
    """No description needed"""
    return ConversationHandler.END


async def callback(
    update: Update,
    context: CallbackContext,
) -> None:
    query = update.callback_query
    answer = await query.answer()

    if answer:
        if "approve_" in query.data:
            win_number = query.data.split("_")[1]
            await context.bot.send_message(
                chat_id=settings.MODERATOR_ID,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {win_number} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞.",
            )
            await update.effective_chat.send_message(
                "–ù–∞ –º–µ—Å—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –í–∞—à–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –ø—Ä–∏–∑–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –∞–∫—Ç—É–∞–ª—å–Ω–Ω–æ –Ω–∞ 02.03.2024) –Ω–∏–∂–µ üëáüèª"
            )
            await update.effective_chat.send_message(
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∞–ø–∫–∞\n"
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞—Ä—Ñ\n"
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–¥\n"
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏\n"
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–æ—Å\n"
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—É—ç—Ä –±–∞–Ω–∫\n\n"
                "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞\n"
                "–°–æ–ª–Ω–µ—á–Ω–∞—è –¥–æ–ª–∏–Ω–∞: –ü—Ä–∏–∑ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Å 17:00 –¥–æ 18:00 02.03.2024"
            )
        if "reject_" in query.data:
            win_number = query.data.split("_")[1]
            await context.bot.send_message(
                chat_id=settings.MODERATOR_ID,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {win_number} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.",
            )
